apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'checkstyle'
apply plugin: 'antlr4'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "org.manifold"
// name = "manifold-frontend"
version = '0.4.0-SNAPSHOT'

mainClassName = "org.manifold.compiler.front.Main"

jar {
  manifest {
    attributes 'Implementation-Title': 'Manifold Frontend', 'Implementation-Version': version, 'Main-Class': 'org.manifold.compiler.front.Main'
  }
  from { configurations.antlr4.collect { it.isDirectory() ? it : zipTree(it) } }
}

repositories {
  mavenCentral()
  jcenter()
  mavenLocal()
  maven {
    name 'Manifold release repository'
    url 'http://manifold-lang.org/releases'
  }
}

run {
  standardInput = System.in
}

dependencies {
  compile 'com.google.code.gson:gson:2.2.4'
  compile 'com.google.guava:guava:17.0'
  testCompile 'junit:junit:4.11'
  testCompile 'org.skyscreamer:jsonassert:1.2.3'
  compile 'log4j:log4j:1.2.16'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
  compile 'org.manifold:manifold-core:0.11.+'
}

buildscript {
  repositories {
    mavenCentral()
    maven {
        name 'JFrog OSS snapshot repo'
        url  'https://oss.jfrog.org/oss-snapshot-local/'
    }
    jcenter()
  }

  dependencies {
    classpath 'org.ajoberstar:gradle-jacoco:0.2.0'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
    classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1-SNAPSHOT'
  }
}

apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.7.1.201405082137"
  reportsDir = file("$buildDir/reports/jacoco")
}

test {
  testLogging {
      showStandardStreams = true
      exceptionFormat = 'full'
  }
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpFile = file("$buildDir/jacoco/classpathdumps")
  }
  dependencies {
    runtime fileTree(dir: "tests/acceptance", include: "*.manifold")
    runtime fileTree(dir: "tests/buildErrors", include: "*.manifold")
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true
    csv.enabled = false
    html.destination = "${buildDir}/reports/jacoco"
  }
}

check.dependsOn(jacocoTestReport)

checkstyle {
  configFile = new File(rootDir, "checkstyle.xml")
  ignoreFailures = false
  showViolations = true
  toolVersion = "6.18"
}

antlr4 {
    extraArgs=["-package", "org.manifold.parser", "-o", "build/generated-src/org/manifold/parser"]
}

// make the Java compile task depend on the antlr4 task
compileJava.dependsOn antlr4

// add the generated source files to the list of java sources
sourceSets.main.java.srcDirs += antlr4.output

// add antlr4 to classpath
configurations {
   compile.extendsFrom antlr4
}

task jenkinsTest {
  inputs.files test.outputs.files
  doLast {
    def timestamp = System.currentTimeMillis()
    testResultsDir.eachFile { it.lastModified = timestamp }
  }
}

build.dependsOn(jenkinsTest)

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: "file://localhost/var/www/releases")
    }
  }
}

idea {
    module {
        excludeDirs -= file("$buildDir")
        excludeDirs += files { file("$buildDir").listFiles() }
        excludeDirs -= file("$buildDir/generated-src")
    }
}
